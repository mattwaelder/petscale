[{"/home/ubuntu/app/client/src/index.js":"1","/home/ubuntu/app/client/src/reportWebVitals.js":"2","/home/ubuntu/app/client/src/App.jsx":"3","/home/ubuntu/app/client/src/utilities.js":"4","/home/ubuntu/app/client/src/Dashboard.jsx":"5","/home/ubuntu/app/client/src/authentication/Register.jsx":"6","/home/ubuntu/app/client/src/authentication/Login.jsx":"7","/home/ubuntu/app/client/src/authentication/Reset.jsx":"8","/home/ubuntu/app/client/src/DataInput/index.jsx":"9","/home/ubuntu/app/client/src/LineChart/index.jsx":"10","/home/ubuntu/app/client/src/DataList/index.jsx":"11","/home/ubuntu/app/client/src/please.js":"12","/home/ubuntu/app/client/src/authentication/firebase.js":"13","/home/ubuntu/app/client/src/UnitToggle/index.jsx":"14","/home/ubuntu/app/client/src/DataInput/inputFormPet.jsx":"15","/home/ubuntu/app/client/src/firebaseOptions.js":"16","/home/ubuntu/app/client/src/DataInput/inputFormData.jsx":"17","/home/ubuntu/app/client/src/DataList/ListItem/index.jsx":"18"},{"size":631,"mtime":1684362667835,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1684362667835,"results":"21","hashOfConfig":"20"},{"size":1943,"mtime":1684362667835,"results":"22","hashOfConfig":"20"},{"size":2799,"mtime":1684362667835,"results":"23","hashOfConfig":"20"},{"size":5258,"mtime":1684362667835,"results":"24","hashOfConfig":"20"},{"size":2336,"mtime":1684362667835,"results":"25","hashOfConfig":"20"},{"size":2287,"mtime":1684362667835,"results":"26","hashOfConfig":"20"},{"size":1158,"mtime":1684362667835,"results":"27","hashOfConfig":"20"},{"size":5128,"mtime":1684362667835,"results":"28","hashOfConfig":"20"},{"size":1205,"mtime":1684362667835,"results":"29","hashOfConfig":"20"},{"size":4183,"mtime":1684362667835,"results":"30","hashOfConfig":"20"},{"size":1753,"mtime":1684362667835,"results":"31","hashOfConfig":"20"},{"size":2607,"mtime":1684362667835,"results":"32","hashOfConfig":"20"},{"size":503,"mtime":1684362667835,"results":"33","hashOfConfig":"20"},{"size":1365,"mtime":1684362667835,"results":"34","hashOfConfig":"20"},{"size":363,"mtime":1688940634184,"results":"35","hashOfConfig":"20"},{"size":2024,"mtime":1684362667835,"results":"36","hashOfConfig":"20"},{"size":1411,"mtime":1684362667835,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mahjq",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},"/home/ubuntu/app/client/src/index.js",[],[],"/home/ubuntu/app/client/src/reportWebVitals.js",[],[],"/home/ubuntu/app/client/src/App.jsx",["100","101","102","103","104","105"],[],"import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport DataInput from \"./DataInput\";\nimport DataList from \"./DataList\";\nimport axios from \"axios\";\nimport utils from \"./utilities.js\";\nimport LineChart from \"./LineChart\";\nimport Login from \"./authentication/Login\";\nimport Register from \"./authentication/Register\";\nimport Reset from \"./authentication/Reset\";\nimport Dashboard from \"./Dashboard\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  useEffect(() => {\n    console.log(\"application GO\");\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Routes>\n          <Route exact path=\"/\" element={<Login />} />\n          <Route exact path=\"/register\" element={<Register />} />\n          <Route exact path=\"/reset\" element={<Reset />} />\n          <Route exact path=\"/dashboard\" element={<Dashboard />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n//////////////// THOUGHTS TODO ///////////////\n\n//color tied to weight in some way?\n//either that or have red for big drops in weight (or an outline drop shadow etc?)\n\n//add support for some kind of automation? IFTTT? google/alexa? smart scale?\n\n//add api information about basic weight info for given animals?\n\n//should add confirm email to make sure its your email\n//cant login with email after login with google?\n\n// FIREBASE MAY NEED RULES UPDATED BEFORE HOSTING FOR SECURITY\n\n//replace \"logged in as x\" with icon + name, when icon is clicked a logout button appears\n\n//i feel like the form input section is too big (empty) while at default state\n\n//ability to change colors of animals from the default color or to select color when creating a new pet\n\n//database might need a rethink... maybe\n\n// in the db, mongoURI may need to be moved to .env from database index file\n\n//~~~~~~~~~\n\n//utilities and db (mongouri) are using paths/hard coded ports not referencing env\n","/home/ubuntu/app/client/src/utilities.js",[],[],"/home/ubuntu/app/client/src/Dashboard.jsx",["106","107","108","109","110","111","112"],[],"import React, { useEffect, useState, useRef } from \"react\";\nimport DataInput from \"./DataInput\";\nimport DataList from \"./DataList\";\nimport UnitToggle from \"./UnitToggle\";\nimport axios from \"axios\";\nimport utils from \"./utilities.js\";\nimport LineChart from \"./LineChart\";\nimport { please } from \"./please.js\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { auth, db, logout } from \"./authentication/firebase\";\nimport { query, collection, getDocs, where } from \"firebase/firestore\";\n\nimport \"./App.css\";\n\nfunction Dashboard() {\n  const [user, loading, error] = useAuthState(auth);\n  const [userName, setUserName] = useState(\"\");\n  const navigate = useNavigate();\n  //weight data is response from server\n  const [weightData, setWeightData] = useState([]);\n  //displayed data is filtered version of weightData\n  const [displayedData, setDisplayedData] = useState([]);\n  const [petList, setPetList] = useState([]);\n  //petdata = data for chart.js\n  const [petData, setPetData] = useState([]);\n  const [isLbs, setIsLbs] = useState(false);\n  //using setRefreshPage as a lifted state to update entire dashboard via effect\n  const [refreshPage, setRefreshPage] = useState(false);\n\n  const fetchUserName = async () => {\n    try {\n      const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user?.uid));\n      const doc = await getDocs(q);\n      const data = doc.docs[0].data();\n      setUserName(\n        data.name.includes(\" \") ? data.name.split(\" \").join(\"\") : data.name\n      );\n    } catch (err) {\n      console.error(err);\n      alert(\"An error occured while fetching user data\");\n    }\n  };\n\n  useEffect(() => {\n    if (loading) return;\n    if (!user) return navigate(\"/\");\n    fetchUserName();\n  }, [user, loading]);\n\n  useEffect(() => {\n    if (!user) return navigate(\"/\");\n    console.log(\"username is \", userName);\n\n    //get data from db for user\n    please\n      .fetchDataByUser(userName)\n      .then((res) => {\n        // let pets = [...new Set(res.data.map((el) => el.name))];\n\n        //get unique pets and order by color index\n        //could be optimized to be less than O(n) linear... break if pets.len >= 5\n        let pets = [];\n        res.data.forEach((pet, i) => {\n          if (pet.color === 1) pets[0] = pet.name;\n          if (pet.color === 2) pets[1] = pet.name;\n          if (pet.color === 3) pets[2] = pet.name;\n          if (pet.color === 4) pets[3] = pet.name;\n          if (pet.color === 5) pets[4] = pet.name;\n        });\n\n        setPetList(pets);\n        setWeightData(res.data);\n      })\n      .catch((err) => console.log(err));\n  }, [refreshPage, userName]);\n\n  //\n\n  useEffect(() => {\n    //create datasets for each possible pet\n    let d1 = utils.getLineGraphValues(petList, weightData, isLbs, 0);\n    let d2 = utils.getLineGraphValues(petList, weightData, isLbs, 1);\n    let d3 = utils.getLineGraphValues(petList, weightData, isLbs, 2);\n    let d4 = utils.getLineGraphValues(petList, weightData, isLbs, 3);\n    let d5 = utils.getLineGraphValues(petList, weightData, isLbs, 4);\n\n    let fullSet = [d1, d2, d3, d4, d5];\n\n    //prune by pet count and format arr to be what chart.js expects\n    let prunedData = fullSet\n      .map((d) => (d.length > 0 ? d : null))\n      .filter((x) => x)\n      .map((d, i) => {\n        return {\n          label: petList[i],\n          data: d,\n          backgroundColor: `${utils.colorSet[i]}`,\n          borderColor: `${utils.colorSet[i + 5]}`,\n          options: {\n            plugins: {\n              tooltip: {\n                callbacks: {\n                  title: (context) => {\n                    console.log(context);\n                  },\n                },\n              },\n            },\n          },\n        };\n      });\n\n    //update graph\n    setPetData(prunedData);\n    //update list\n    setDisplayedData(weightData);\n  }, [weightData, isLbs]);\n\n  const changeUnit = (e) => {\n    setIsLbs((isLbs) => !isLbs);\n  };\n\n  //filter the displayed data (list)\n  const handleFilter = (e) => {\n    let selectedPet = petList[e.target.value - 1] || null;\n\n    //if no filter, display all & return\n    if (!selectedPet) {\n      setDisplayedData(weightData);\n      return;\n    }\n\n    let tempData = weightData.filter((data, i) => data.name === selectedPet);\n\n    setDisplayedData(tempData);\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard__container\">\n        Logged in as\n        <div>{userName}</div>\n        <button className=\"dashboard__btn logout_btn\" onClick={logout}>\n          Logout\n        </button>\n      </div>\n      <DataList\n        data={displayedData}\n        isLbs={isLbs}\n        user={user}\n        fetchData={please.fetchData}\n        refresh={setRefreshPage}\n        pets={petList}\n        handleFilter={handleFilter}\n        changeUnit={changeUnit}\n      />\n      <div className=\"graph_input_container\">\n        {weightData.length && weightData.length > 0 ? (\n          <LineChart pets={petList} data={petData} refresh={setRefreshPage} />\n        ) : null}\n        <DataInput\n          user={userName}\n          pets={petList}\n          fetchData={please.fetchData}\n          refresh={setRefreshPage}\n        />\n      </div>\n    </div>\n  );\n}\nexport default Dashboard;\n","/home/ubuntu/app/client/src/authentication/Register.jsx",["113","114"],[],"import React, { useEffect, useState } from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport {\n  auth,\n  registerWithEmailAndPassword,\n  signInWithGoogle,\n} from \"./firebase\";\nimport { FcGoogle } from \"react-icons/fc\";\n\nfunction Register() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [user, loading, error] = useAuthState(auth);\n  // const history = useNavigate();\n  const navigate = useNavigate();\n\n  const register = () => {\n    if (!name) alert(\"Please enter name\");\n    registerWithEmailAndPassword(name, email, password);\n  };\n\n  useEffect(() => {\n    if (loading) return;\n    if (user) navigate(\"/dashboard\");\n  }, [user, loading]);\n\n  return (\n    <div className=\"form-signin m-auto text-center mt-5\">\n      <h3 className=\"mb-3 fw-normal\">Register</h3>\n      <div>\n        <input\n          type=\"text\"\n          className=\"form-control mb-2\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Username\"\n        />\n        <input\n          type=\"text\"\n          className=\"form-control mb-2\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"E-mail Address\"\n        />\n        <input\n          type=\"password\"\n          className=\"form-control mb-3\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder=\"Password\"\n        />\n        <div className=\"d-grid gap-2 d-md-block mb-3\">\n          <button className=\"btn btn-primary mb-2\" onClick={register}>\n            Register\n          </button>\n          <div className=\"container\">\n            <span className=\"me-2\">or</span>\n            <button\n              className=\"btn login__btn login__google ms-1 bg-light text-dark position-relative\"\n              onClick={(e) => signInWithGoogle(e)}\n            >\n              <FcGoogle className=\"h4 position-absolute top-30 start-0 ms-1\" />\n              <span className=\"ms-4\">Register with Google</span>\n            </button>\n          </div>\n        </div>\n        <div>\n          Already have an account? <Link to=\"/\">Login</Link> now.\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Register;\n","/home/ubuntu/app/client/src/authentication/Login.jsx",["115","116"],[],"import React, { useEffect, useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport {\n  auth,\n  logInWithEmailAndPassword,\n  signInWithGoogle,\n} from \"./firebase.js\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { FcGoogle } from \"react-icons/fc\";\n// import \"./Login.css\";\n\nfunction Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, loading, error] = useAuthState(auth);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (loading) {\n      // maybe trigger a loading screen\n      return;\n    }\n    if (user) navigate(\"/dashboard\");\n  }, [user, loading]);\n\n  return (\n    <div className=\"form-signin m-auto text-center mt-5\">\n      <div>\n        <h3 className=\"mb-3 fw-normal\">Sign In</h3>\n        <div className=\"center mb-2\">\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"E-mail Address\"\n          ></input>\n        </div>\n        <div className=\"mb-3\">\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Password\"\n          ></input>\n        </div>\n        <div className=\"d-grid gap-2 d-md-block mb-3\">\n          <button\n            className=\"btn btn-primary mb-2\"\n            onClick={() => logInWithEmailAndPassword(email, password)}\n          >\n            Sign In\n          </button>\n          <div className=\"container\">\n            <span className=\"me-2\">or</span>\n            <button\n              className=\"btn login__btn login__google ms-1 bg-light text-dark position-relative\"\n              onClick={signInWithGoogle}\n            >\n              <FcGoogle className=\"h4 position-absolute top-30 start-0 ms-1\" />\n              <span className=\"ms-4\">Login with Google</span>\n            </button>\n          </div>\n        </div>\n        <div>\n          <Link to=\"/reset\">Forgot Password</Link>\n        </div>\n        <div>\n          Don't have an account? <Link to=\"/register\">Register</Link> now.\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Login;\n","/home/ubuntu/app/client/src/authentication/Reset.jsx",["117","118"],[],"import React, { useEffect, useState } from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { auth } from \"./firebase\";\nimport { sendPasswordResetEmail } from \"firebase/auth\";\n\nfunction Reset() {\n  const [email, setEmail] = useState(\"\");\n  const [user, loading, error] = useAuthState(auth);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (loading) return;\n    if (user) navigate(\"/dashboard\");\n  }, [user, loading]);\n\n  return (\n    <div className=\"form-signin m-auto text-center mt-5\">\n      <h3 className=\"mb-3\">Reset Password</h3>\n      <input\n        type=\"text\"\n        className=\"form-control mb-2\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"E-mail Address\"\n      />\n      <button\n        className=\"btn btn-primary mb-3\"\n        onClick={() => sendPasswordResetEmail(email)}\n      >\n        Send password reset email\n      </button>\n      <div>\n        Don't have an account? <Link to=\"/register\">Register</Link> now.\n      </div>\n    </div>\n  );\n}\nexport default Reset;\n","/home/ubuntu/app/client/src/DataInput/index.jsx",["119","120"],[],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport utils from \"../utilities.js\";\nimport { please } from \"../please.js\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWeightHanging } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./DataInput.css\";\nimport InputFormData from \"./inputFormData\";\nimport InputFormPet from \"./inputFormPet\";\n\nconst DataInput = ({ user, pets, fetchData, refresh }) => {\n  let [name, setName] = useState(\"\");\n  let [weight, setWeight] = useState(\"\");\n  let [unit, setUnit] = useState(\"\");\n  let [showForm, setShowForm] = useState(false);\n  let [content, setContent] = useState(\"main\");\n  let [weighDate, setWeighDate] = useState(Date());\n\n  const handleChange = (e) => {\n    console.log(e.target.id);\n    switch (e.target.id) {\n      case \"name\":\n        setName(e.target.value);\n        break;\n      case \"weight\":\n        setWeight(e.target.value);\n        break;\n      case \"unit\":\n        setUnit(e.target.value);\n        break;\n      case \"pet_select\":\n        setName(pets[e.target.value - 1]);\n        break;\n      case \"weigh_date\":\n        setWeighDate(e.target.value);\n        break;\n      default:\n        alert(\"please fill all selections\");\n    }\n  };\n\n  //displays correct form based on event value\n  const handleFormSelect = (e) => {\n    e.preventDefault();\n    // console.log(e.target.value);\n    switch (e.target.value) {\n      case \"pet\":\n        setShowForm(true);\n        setContent(\"pet\");\n        break;\n      case \"data\":\n        setShowForm(true);\n        setContent(\"data\");\n        break;\n      case \"return\":\n        setShowForm(false);\n        setContent(\"main\");\n        break;\n      default:\n        alert(\"Sorry, an error occurred :(\");\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    //453.592 grams in a lb\n    if (e.target.value === \"pet\") {\n      //form validation\n      if (pets.includes(name)) {\n        alert(\"that pet already exists\");\n        return;\n      }\n      if (name.length <= 3) {\n        alert(\"names must be longer than 3 characters\");\n        return;\n      }\n      if (pets.length >= 5) {\n        alert(\"Sorry, we can't handle more than 5 pets right now :(\");\n        return;\n      }\n      if (weight === \"\" || weight === 0) {\n        alert(\"Please enter a weight\");\n        return;\n      }\n      if (unit === \"\") {\n        alert(\"Please select a unit\");\n        return;\n      }\n\n      console.log(name, weight, unit, weighDate);\n\n      // update the db w/ new pet\n      please\n        .createPetByUser(user, name, weight, unit, pets.length, weighDate)\n        .then((res) => {\n          //reset form and states\n          setName(\"\");\n          setWeight(\"\");\n          setUnit(\"\");\n          let form = document.querySelector(\"#weight_submit_form\");\n          form.reset();\n          setShowForm(false);\n          //remove the form\n          setContent(\"main\");\n        })\n        .then(() => refresh((val) => !val))\n        .catch((err) => console.log(err));\n      console.warn(user, name, weight, unit, Date());\n    }\n\n    //update the db with new data for existing pet\n    if (e.target.value === \"data\") {\n      console.log(name, weight, unit, weighDate);\n      if (name.length && Number(weight) > 0 && unit) {\n        please\n          .createDataByUser(\n            user,\n            name,\n            weight,\n            unit,\n            pets.indexOf(`${name}`),\n            weighDate\n          )\n          .then(() => {\n            //reset form and states\n            setName(\"\");\n            setWeight(\"\");\n            setUnit(\"\");\n            let form = document.querySelector(\"#weight_submit_form\");\n            form.reset();\n            setShowForm(false);\n            setContent(\"main\");\n          })\n          .then(() => refresh((val) => !val))\n          .catch((err) => console.log(err));\n      }\n    }\n  };\n\n  return (\n    <div className=\"input_form_container\">\n      {!showForm && content === \"main\" && (\n        <div className=\"main_btns_container\">\n          <button\n            className=\"form_btn form_btn_main\"\n            value=\"data\"\n            onClick={(e) => handleFormSelect(e)}\n          >\n            Add Weight\n          </button>\n          {pets.length < 5 && (\n            <button\n              className=\"form_btn form_btn_main\"\n              value=\"pet\"\n              onClick={(e) => handleFormSelect(e)}\n            >\n              Add New Pet\n            </button>\n          )}\n        </div>\n      )}\n\n      {showForm && content === \"data\" && (\n        <InputFormData\n          pets={pets}\n          handleFormSelect={handleFormSelect}\n          handleChange={handleChange}\n          handleSubmit={handleSubmit}\n        />\n      )}\n\n      {showForm && content === \"pet\" && pets.length < 5 && (\n        <InputFormPet\n          pets={pets}\n          handleFormSelect={handleFormSelect}\n          handleChange={handleChange}\n          handleSubmit={handleSubmit}\n        />\n      )}\n\n      <div id=\"weight_icon_container\">\n        <FontAwesomeIcon icon={faWeightHanging} />\n      </div>\n    </div>\n  );\n};\n\nexport default DataInput;\n","/home/ubuntu/app/client/src/LineChart/index.jsx",["121"],[],"import React from \"react\";\n\nimport {\n  Chart as ChartJS,\n  TimeScale,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nimport { Line } from \"react-chartjs-2\";\nimport utils from \"../utilities.js\";\nimport \"chartjs-adapter-date-fns\";\nimport \"./LineChart.css\";\n\nChartJS.register(\n  TimeScale,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst LineChart = ({ pets, data }) => {\n  //chart options\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      tooltip: {\n        callbacks: {\n          title: (context) => {\n            let hoverDate = `${context[0].label.split(\",\")[0]}, ${\n              context[0].label.split(\",\")[1]\n            }`;\n            return hoverDate;\n          },\n        },\n      },\n      title: {\n        display: false,\n        text: \"Chart.js Line Chart\",\n      },\n    },\n    scales: { x: { type: \"time\" } },\n  };\n\n  return (\n    <div className=\"chart_container\">\n      <Line\n        options={options}\n        data={{\n          datasets: data,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default LineChart;\n","/home/ubuntu/app/client/src/DataList/index.jsx",[],[],"/home/ubuntu/app/client/src/please.js",[],[],"/home/ubuntu/app/client/src/authentication/firebase.js",[],[],"/home/ubuntu/app/client/src/UnitToggle/index.jsx",[],[],"/home/ubuntu/app/client/src/DataInput/inputFormPet.jsx",[],[],"/home/ubuntu/app/client/src/firebaseOptions.js",[],[],"/home/ubuntu/app/client/src/DataInput/inputFormData.jsx",[],[],"/home/ubuntu/app/client/src/DataList/ListItem/index.jsx",["122","123","124","125"],[],"import React from \"react\";\nimport { useState } from \"react\";\nimport \"./ListItem.css\";\nimport utils from \"../../utilities.js\";\nimport { please } from \"../../please.js\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faBookmark } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\n\nconst ListItem = ({\n  data,\n  isLbs,\n  user,\n  fetchData,\n  refresh,\n  setDelEntry,\n  colorIndex,\n}) => {\n  return (\n    <div className=\"list_card\">\n      <div\n        className=\"card_color_tag\"\n        style={{\n          backgroundColor: `${utils.colorSet[colorIndex]}`,\n        }}\n      >\n        {/* <FontAwesomeIcon icon={faBookmark} /> */}\n      </div>\n      <div id=\"card_name\">\n        <p>{data.name}</p>\n      </div>\n      <div id=\"card_weight\">\n        <span id=\"weight_val\">\n          {isLbs ? (data.weight * 0.00220462).toFixed(2) : data.weight}\n        </span>{\" \"}\n        <span id=\"card_unit\">{isLbs ? \"lbs\" : \"grams\"}</span>\n      </div>\n      <div id=\"card_date\">\n        <span>{utils.getFormattedDate(data.created_at)}</span>\n      </div>\n      <div\n        className=\"trash\"\n        vlaue={data}\n        id={data._id}\n        onClick={(e) => setDelEntry((delEntry) => data)}\n        data-bs-toggle=\"modal\"\n        data-bs-target=\"#deleteEntryModal\"\n      >\n        <FontAwesomeIcon icon={faTrash} />\n      </div>\n    </div>\n  );\n};\n\nexport default ListItem;\n",{"ruleId":"126","severity":1,"message":"127","line":2,"column":17,"nodeType":"128","messageId":"129","endLine":2,"endColumn":25},{"ruleId":"126","severity":1,"message":"130","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":17},{"ruleId":"126","severity":1,"message":"131","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":16},{"ruleId":"126","severity":1,"message":"132","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":13},{"ruleId":"126","severity":1,"message":"133","line":6,"column":8,"nodeType":"128","messageId":"129","endLine":6,"endColumn":13},{"ruleId":"126","severity":1,"message":"134","line":7,"column":8,"nodeType":"128","messageId":"129","endLine":7,"endColumn":17},{"ruleId":"126","severity":1,"message":"135","line":1,"column":38,"nodeType":"128","messageId":"129","endLine":1,"endColumn":44},{"ruleId":"126","severity":1,"message":"136","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":18},{"ruleId":"126","severity":1,"message":"132","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":13},{"ruleId":"126","severity":1,"message":"137","line":17,"column":25,"nodeType":"128","messageId":"129","endLine":17,"endColumn":30},{"ruleId":"138","severity":1,"message":"139","line":49,"column":6,"nodeType":"140","endLine":49,"endColumn":21,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":76,"column":6,"nodeType":"140","endLine":76,"endColumn":29,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"144","line":118,"column":6,"nodeType":"140","endLine":118,"endColumn":25,"suggestions":"145"},{"ruleId":"126","severity":1,"message":"137","line":15,"column":25,"nodeType":"128","messageId":"129","endLine":15,"endColumn":30},{"ruleId":"138","severity":1,"message":"146","line":27,"column":6,"nodeType":"140","endLine":27,"endColumn":21,"suggestions":"147"},{"ruleId":"126","severity":1,"message":"137","line":15,"column":25,"nodeType":"128","messageId":"129","endLine":15,"endColumn":30},{"ruleId":"138","severity":1,"message":"146","line":24,"column":6,"nodeType":"140","endLine":24,"endColumn":21,"suggestions":"148"},{"ruleId":"126","severity":1,"message":"137","line":10,"column":25,"nodeType":"128","messageId":"129","endLine":10,"endColumn":30},{"ruleId":"138","severity":1,"message":"146","line":16,"column":6,"nodeType":"140","endLine":16,"endColumn":21,"suggestions":"149"},{"ruleId":"126","severity":1,"message":"132","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":13},{"ruleId":"126","severity":1,"message":"133","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":13},{"ruleId":"126","severity":1,"message":"133","line":16,"column":8,"nodeType":"128","messageId":"129","endLine":16,"endColumn":13},{"ruleId":"126","severity":1,"message":"127","line":2,"column":10,"nodeType":"128","messageId":"129","endLine":2,"endColumn":18},{"ruleId":"126","severity":1,"message":"150","line":5,"column":10,"nodeType":"128","messageId":"129","endLine":5,"endColumn":16},{"ruleId":"126","severity":1,"message":"151","line":7,"column":19,"nodeType":"128","messageId":"129","endLine":7,"endColumn":29},{"ruleId":"126","severity":1,"message":"132","line":8,"column":8,"nodeType":"128","messageId":"129","endLine":8,"endColumn":13},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'DataInput' is defined but never used.","'DataList' is defined but never used.","'axios' is defined but never used.","'utils' is defined but never used.","'LineChart' is defined but never used.","'useRef' is defined but never used.","'UnitToggle' is defined but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchUserName' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["152"],"React Hook useEffect has missing dependencies: 'navigate' and 'user'. Either include them or remove the dependency array.",["153"],"React Hook useEffect has a missing dependency: 'petList'. Either include it or remove the dependency array.",["154"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["155"],["156"],["157"],"'please' is defined but never used.","'faBookmark' is defined but never used.",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"164","fix":"166"},{"desc":"164","fix":"167"},"Update the dependencies array to be: [user, loading, navigate, fetchUserName]",{"range":"168","text":"169"},"Update the dependencies array to be: [navigate, refreshPage, user, userName]",{"range":"170","text":"171"},"Update the dependencies array to be: [weightData, isLbs, petList]",{"range":"172","text":"173"},"Update the dependencies array to be: [user, loading, navigate]",{"range":"174","text":"175"},{"range":"176","text":"175"},{"range":"177","text":"175"},[1770,1785],"[user, loading, navigate, fetchUserName]",[2635,2658],"[navigate, refreshPage, user, userName]",[3871,3890],"[weightData, isLbs, petList]",[795,810],"[user, loading, navigate]",[662,677],[528,543]]