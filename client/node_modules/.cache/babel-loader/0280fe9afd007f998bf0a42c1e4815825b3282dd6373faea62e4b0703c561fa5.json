{"ast":null,"code":"import axios from\"axios\";import utils from\"./utilities.js\";export var please={fetchDataByUser:function fetchDataByUser(user){console.log(\"please get by user\",user);return axios.get(\"\".concat(utils.API,\"/users/?user=\").concat(user));},createPetByUser:function createPetByUser(user,name,weight,unit,petsLen,date){//default state for date is set for now, so this works\n//splitting date to array [yyyy, mm, dd] fixes utc issue\nvar yourDate=new Date();var offset=yourDate.getTimezoneOffset();var today=new Date(yourDate.getTime()-offset*60*1000);var formattedDate=today.toISOString().split(\"T\")[0];var dateArr=formattedDate.split(\"-\");var newDate=new Date(dateArr);//store all weight in grams\nvar weightInGrams=unit===\"lbs\"?(Number(weight)*453.592).toFixed(2):Number(weight);//if there are no pets, set this to be color 1\nvar colorIndex=petsLen?petsLen+1:1;var pkg={// owner: user.slice(\" \"),\nowner:\"\".concat(user),name:name,weight:weightInGrams,unit:unit,color:colorIndex,created_at:newDate};return axios.post(\"\".concat(utils.API,\"/users/pet/?pet=\").concat(name),pkg);},createDataByUser:function createDataByUser(user,name,weight,unit,colorIndex,date){var dateArr=date.split(\"-\");//splitting date to array [yyyy, mm, dd] fixes utc issue\nvar newDate=new Date(dateArr);var weightInGrams=unit===\"lbs\"?(Number(weight)*453.592).toFixed(2):Number(weight);var pkg={owner:\"\".concat(user),name:name,weight:weightInGrams,unit:unit,color:colorIndex+1,created_at:newDate};return axios.post(\"\".concat(utils.API,\"/users/?user=\").concat(user),pkg);}};","map":{"version":3,"names":["axios","utils","please","fetchDataByUser","user","console","log","get","concat","API","createPetByUser","name","weight","unit","petsLen","date","yourDate","Date","offset","getTimezoneOffset","today","getTime","formattedDate","toISOString","split","dateArr","newDate","weightInGrams","Number","toFixed","colorIndex","pkg","owner","color","created_at","post","createDataByUser"],"sources":["/home/ubuntu/app/src/please.js"],"sourcesContent":["import axios from \"axios\";\nimport utils from \"./utilities.js\";\n\nexport const please = {\n  fetchDataByUser: (user) => {\n    console.log(\"please get by user\", user);\n    return axios.get(`${utils.API}/users/?user=${user}`);\n  },\n\n  createPetByUser: (user, name, weight, unit, petsLen, date) => {\n    //default state for date is set for now, so this works\n    //splitting date to array [yyyy, mm, dd] fixes utc issue\n    let yourDate = new Date();\n    const offset = yourDate.getTimezoneOffset();\n    let today = new Date(yourDate.getTime() - offset * 60 * 1000);\n    let formattedDate = today.toISOString().split(\"T\")[0];\n    let dateArr = formattedDate.split(\"-\");\n    let newDate = new Date(dateArr);\n    //store all weight in grams\n    let weightInGrams =\n      unit === \"lbs\" ? (Number(weight) * 453.592).toFixed(2) : Number(weight);\n    //if there are no pets, set this to be color 1\n    let colorIndex = petsLen ? petsLen + 1 : 1;\n\n    let pkg = {\n      // owner: user.slice(\" \"),\n      owner: `${user}`,\n      name: name,\n      weight: weightInGrams,\n      unit: unit,\n      color: colorIndex,\n      created_at: newDate,\n    };\n    return axios.post(`${utils.API}/users/pet/?pet=${name}`, pkg);\n  },\n\n  createDataByUser: (user, name, weight, unit, colorIndex, date) => {\n    let dateArr = date.split(\"-\");\n    //splitting date to array [yyyy, mm, dd] fixes utc issue\n    let newDate = new Date(dateArr);\n    let weightInGrams =\n      unit === \"lbs\" ? (Number(weight) * 453.592).toFixed(2) : Number(weight);\n\n    let pkg = {\n      owner: `${user}`,\n      name: name,\n      weight: weightInGrams,\n      unit: unit,\n      color: colorIndex + 1,\n      created_at: newDate,\n    };\n    return axios.post(`${utils.API}/users/?user=${user}`, pkg);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}