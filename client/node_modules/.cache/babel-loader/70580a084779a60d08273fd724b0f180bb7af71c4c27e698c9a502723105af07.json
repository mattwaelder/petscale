{"ast":null,"code":"// module.exports = {\n//   API: `http://localhost:${process.env.PORT}`,\n// };\n// require(\"dotenv\").config();\n// console.log(\"/////////////////////////////////////\", process.env.PORT);\nvar utils={// API: `http://localhost:${5050}`,\n// API: `http://localhost:${process.env.SERVER_PORT}`,\n// API: `http://localhost:${3001}`,\nAPI:process.env.NODE_ENV===\"production\"?\"\".concat(process.env.SERVER_PORT):\"http://localhost:3001\",getFormattedDate:function getFormattedDate(messyDate){var dateOptions={year:\"numeric\",month:\"long\",day:\"numeric\",weekday:\"long\"};//date constructor to apply dateOptions\nvar date=new Date(messyDate).toLocaleDateString(\"en-US\",dateOptions);//removing weekday from date\nvar formattedDate=date.split(\", \").slice(1).join(\", \");return formattedDate;},getFormattedDateGraph:function getFormattedDateGraph(messyDate){// let dateOptions = {\n//   year: \"numeric\",\n//   month: \"numeric\",\n//   day: \"numeric\",\n//   weekday: \"long\",\n// };\n// //date constructor to apply dateOptions\n// let date = new Date(messyDate).toLocaleDateString(\"en-US\", dateOptions);\n// //removing weekday from date\n// let formattedDate = date.split(\", \").slice(1).join(\", \");\n// return formattedDate;\nreturn messyDate.split(\"T\")[0];},getLineGraphValues:function getLineGraphValues(petList,data,isLbs,petNum){var dataGrams=data.map(function(d){return d.name===petList[petNum]?{x:utils.getFormattedDateGraph(d.created_at),y:d.weight}:null;}).filter(function(x){return x;}).reverse();var dataLbs=data.map(function(d){return d.name===petList[petNum]?{x:utils.getFormattedDateGraph(d.created_at),y:(d.weight*0.00220462).toFixed(2)}:null;}).filter(function(x){return x;}).reverse();return isLbs?dataLbs:dataGrams;},//color value obj for graph (0 matches with 5, 1 with 6)\n//final colors be aqua, blue, pink, darker pink, yellow?\n// colorSet: {\n//   0: \"rgba(200,50,50,0.8)\",\n//   1: \"rgba(50,50,200,0.8)\",\n//   2: \"rgba(50,200,50,0.8)\",\n//   3: \"rgba(200,0,200,0.8)\",\n//   4: \"rgba(20,20,20,0.8)\",\n//   5: \"rgba(200,50,50,0.5)\",\n//   6: \"rgba(50,50,200,0.5)\",\n//   7: \"rgba(50,200,50,0.5)\",\n//   8: \"rgba(200,0,200,0.5)\",\n//   9: \"rgba(20,20,20,0.5)\",\n// },\ncolorSet:{0:\"rgba(200,0,200,1)\",1:\"rgba(0,120,200,1)\",2:\"rgba(50,180,100,1)\",3:\"rgba(180,0,50,1)\",4:\"rgba(230,130,0,1)\",5:\"rgba(200,0,200,0.5)\",6:\"rgba(0,120,200,0.5)\",7:\"rgba(50,180,100,0.5)\",8:\"rgba(200,0,50,0.5)\",9:\"rgba(230,130,0,0.5)\"}};export default utils;","map":{"version":3,"names":["utils","API","process","env","NODE_ENV","concat","SERVER_PORT","getFormattedDate","messyDate","dateOptions","year","month","day","weekday","date","Date","toLocaleDateString","formattedDate","split","slice","join","getFormattedDateGraph","getLineGraphValues","petList","data","isLbs","petNum","dataGrams","map","d","name","x","created_at","y","weight","filter","reverse","dataLbs","toFixed","colorSet"],"sources":["/home/ubuntu/app/src/utilities.js"],"sourcesContent":["// module.exports = {\n//   API: `http://localhost:${process.env.PORT}`,\n// };\n\n// require(\"dotenv\").config();\n// console.log(\"/////////////////////////////////////\", process.env.PORT);\n\nconst utils = {\n  // API: `http://localhost:${5050}`,\n  // API: `http://localhost:${process.env.SERVER_PORT}`,\n  // API: `http://localhost:${3001}`,\n  API:\n    process.env.NODE_ENV === \"production\"\n      ? `${process.env.SERVER_PORT}`\n      : \"http://localhost:3001\",\n\n  getFormattedDate: (messyDate) => {\n    let dateOptions = {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      weekday: \"long\",\n    };\n    //date constructor to apply dateOptions\n    let date = new Date(messyDate).toLocaleDateString(\"en-US\", dateOptions);\n    //removing weekday from date\n    let formattedDate = date.split(\", \").slice(1).join(\", \");\n    return formattedDate;\n  },\n\n  getFormattedDateGraph: (messyDate) => {\n    // let dateOptions = {\n    //   year: \"numeric\",\n    //   month: \"numeric\",\n    //   day: \"numeric\",\n    //   weekday: \"long\",\n    // };\n    // //date constructor to apply dateOptions\n    // let date = new Date(messyDate).toLocaleDateString(\"en-US\", dateOptions);\n    // //removing weekday from date\n    // let formattedDate = date.split(\", \").slice(1).join(\", \");\n    // return formattedDate;\n    return messyDate.split(\"T\")[0];\n  },\n\n  getLineGraphValues: (petList, data, isLbs, petNum) => {\n    let dataGrams = data\n      .map((d) =>\n        d.name === petList[petNum]\n          ? {\n              x: utils.getFormattedDateGraph(d.created_at),\n              y: d.weight,\n            }\n          : null\n      )\n      .filter((x) => x)\n      .reverse();\n\n    let dataLbs = data\n      .map((d) =>\n        d.name === petList[petNum]\n          ? {\n              x: utils.getFormattedDateGraph(d.created_at),\n              y: (d.weight * 0.00220462).toFixed(2),\n            }\n          : null\n      )\n      .filter((x) => x)\n      .reverse();\n\n    return isLbs ? dataLbs : dataGrams;\n  },\n  //color value obj for graph (0 matches with 5, 1 with 6)\n  //final colors be aqua, blue, pink, darker pink, yellow?\n\n  // colorSet: {\n  //   0: \"rgba(200,50,50,0.8)\",\n  //   1: \"rgba(50,50,200,0.8)\",\n  //   2: \"rgba(50,200,50,0.8)\",\n  //   3: \"rgba(200,0,200,0.8)\",\n  //   4: \"rgba(20,20,20,0.8)\",\n  //   5: \"rgba(200,50,50,0.5)\",\n  //   6: \"rgba(50,50,200,0.5)\",\n  //   7: \"rgba(50,200,50,0.5)\",\n  //   8: \"rgba(200,0,200,0.5)\",\n  //   9: \"rgba(20,20,20,0.5)\",\n  // },\n\n  colorSet: {\n    0: \"rgba(200,0,200,1)\",\n    1: \"rgba(0,120,200,1)\",\n    2: \"rgba(50,180,100,1)\",\n    3: \"rgba(180,0,50,1)\",\n    4: \"rgba(230,130,0,1)\",\n    5: \"rgba(200,0,200,0.5)\",\n    6: \"rgba(0,120,200,0.5)\",\n    7: \"rgba(50,180,100,0.5)\",\n    8: \"rgba(200,0,50,0.5)\",\n    9: \"rgba(230,130,0,0.5)\",\n  },\n};\n\nexport default utils;\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAEA,GAAM,CAAAA,KAAK,CAAG,CACZ;AACA;AACA;AACAC,GAAG,CACDC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,IAAAC,MAAA,CAC9BH,OAAO,CAACC,GAAG,CAACG,WAAW,EAC1B,uBAAuB,CAE7BC,gBAAgB,CAAE,SAAAA,iBAACC,SAAS,CAAK,CAC/B,GAAI,CAAAC,WAAW,CAAG,CAChBC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,MAAM,CACbC,GAAG,CAAE,SAAS,CACdC,OAAO,CAAE,MACX,CAAC,CACD;AACA,GAAI,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACP,SAAS,CAAC,CAACQ,kBAAkB,CAAC,OAAO,CAAEP,WAAW,CAAC,CACvE;AACA,GAAI,CAAAQ,aAAa,CAAGH,IAAI,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CACxD,MAAO,CAAAH,aAAa,CACtB,CAAC,CAEDI,qBAAqB,CAAE,SAAAA,sBAACb,SAAS,CAAK,CACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAO,CAAAA,SAAS,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAChC,CAAC,CAEDI,kBAAkB,CAAE,SAAAA,mBAACC,OAAO,CAAEC,IAAI,CAAEC,KAAK,CAAEC,MAAM,CAAK,CACpD,GAAI,CAAAC,SAAS,CAAGH,IAAI,CACjBI,GAAG,CAAC,SAACC,CAAC,QACL,CAAAA,CAAC,CAACC,IAAI,GAAKP,OAAO,CAACG,MAAM,CAAC,CACtB,CACEK,CAAC,CAAE/B,KAAK,CAACqB,qBAAqB,CAACQ,CAAC,CAACG,UAAU,CAAC,CAC5CC,CAAC,CAAEJ,CAAC,CAACK,MACP,CAAC,CACD,IAAI,EACV,CAAC,CACAC,MAAM,CAAC,SAACJ,CAAC,QAAK,CAAAA,CAAC,GAAC,CAChBK,OAAO,CAAC,CAAC,CAEZ,GAAI,CAAAC,OAAO,CAAGb,IAAI,CACfI,GAAG,CAAC,SAACC,CAAC,QACL,CAAAA,CAAC,CAACC,IAAI,GAAKP,OAAO,CAACG,MAAM,CAAC,CACtB,CACEK,CAAC,CAAE/B,KAAK,CAACqB,qBAAqB,CAACQ,CAAC,CAACG,UAAU,CAAC,CAC5CC,CAAC,CAAE,CAACJ,CAAC,CAACK,MAAM,CAAG,UAAU,EAAEI,OAAO,CAAC,CAAC,CACtC,CAAC,CACD,IAAI,EACV,CAAC,CACAH,MAAM,CAAC,SAACJ,CAAC,QAAK,CAAAA,CAAC,GAAC,CAChBK,OAAO,CAAC,CAAC,CAEZ,MAAO,CAAAX,KAAK,CAAGY,OAAO,CAAGV,SAAS,CACpC,CAAC,CACD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAY,QAAQ,CAAE,CACR,CAAC,CAAE,mBAAmB,CACtB,CAAC,CAAE,mBAAmB,CACtB,CAAC,CAAE,oBAAoB,CACvB,CAAC,CAAE,kBAAkB,CACrB,CAAC,CAAE,mBAAmB,CACtB,CAAC,CAAE,qBAAqB,CACxB,CAAC,CAAE,qBAAqB,CACxB,CAAC,CAAE,sBAAsB,CACzB,CAAC,CAAE,oBAAoB,CACvB,CAAC,CAAE,qBACL,CACF,CAAC,CAED,cAAe,CAAAvC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}